from flask import Flask, request, jsonify
from flask_cors import CORS
import jwt
import datetime
from functools import wraps
import os
import hashlib
import uuid
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'dev-secret-key-123')
app.config['TOKEN_EXPIRY_MINUTES'] = 30

# In-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–µ–º–æ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
users_storage = {}
games_storage = {}

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def hash_password(password):
    """–•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è"""
    return hashlib.sha256(password.encode()).hexdigest()

def generate_token(user_id, username):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞"""
    payload = {
        'user_id': user_id,
        'username': username,
        'exp': datetime.datetime.utcnow() + datetime.timedelta(minutes=app.config['TOKEN_EXPIRY_MINUTES'])
    }
    return jwt.encode(payload, app.config['SECRET_KEY'], algorithm='HS256')

def token_required(f):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞"""
    @wraps(f)
    def decorated(*args, **kwargs):
        token = request.headers.get('Authorization')
        
        if not token:
            return jsonify({
                'status': 'error', 
                'message': 'Token is missing!'
            }), 401
        
        try:
            if token.startswith('Bearer '):
                token = token[7:]
            
            data = jwt.decode(token, app.config['SECRET_KEY'], algorithms=['HS256'])
            request.current_user = data['user_id']
            request.user_data = data
            
        except jwt.ExpiredSignatureError:
            return jsonify({
                'status': 'error', 
                'message': 'Token has expired!'
            }), 401
        except jwt.InvalidTokenError as e:
            return jsonify({
                'status': 'error', 
                'message': f'Token is invalid: {str(e)}'
            }), 401
        
        return f(*args, **kwargs)
    
    return decorated

# –ú–∞—Ä—à—Ä—É—Ç—ã API
@app.route("/")
def home():
    return jsonify({
        "status": "success",
        "message": "üéÆ GameZY Server is running!",
        "version": "1.0.0",
        "timestamp": datetime.datetime.now().isoformat(),
        "mode": "in-memory",
        "endpoints": {
            "register": "POST /register",
            "login": "POST /login", 
            "verify_token": "POST /verify-token",
            "user_profile": "GET /profile",
            "health": "GET /health",
            "games": "GET /games"
        }
    })

@app.route("/health", methods=["GET"])
def health_check():
    return jsonify({
        "status": "success",
        "message": "‚úÖ Server is healthy",
        "timestamp": datetime.datetime.now().isoformat(),
        "users_count": len(users_storage),
        "port": os.environ.get('PORT', '5000')
    })

@app.route("/register", methods=["POST"])
def register():
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({
                "status": "error", 
                "message": "No JSON data provided"
            }), 400
            
        username = data.get("username", "").strip()
        email = data.get("email", "").strip().lower()
        password = data.get("password", "").strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if not all([username, email, password]):
            return jsonify({
                "status": "error", 
                "message": "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"
            }), 400
        
        if len(username) < 3:
            return jsonify({
                "status": "error",
                "message": "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞"
            }), 400
            
        if len(password) < 6:
            return jsonify({
                "status": "error",
                "message": "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤"
            }), 400
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for user_id, user_data in users_storage.items():
            if user_data['email'] == email:
                return jsonify({
                    "status": "error", 
                    "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                }), 400
            if user_data['username'] == username:
                return jsonify({
                    "status": "error", 
                    "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                }), 400
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = str(uuid.uuid4())
        hashed_password = hash_password(password)
        current_time = datetime.datetime.now()
        
        user_data = {
            'user_id': user_id,
            'username': username,
            'email': email,
            'password_hash': hashed_password,
            'email_verified': True,  # –î–ª—è –¥–µ–º–æ —Å—Ä–∞–∑—É –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
            'created_at': current_time,
            'last_login': current_time,
            'is_online': True,
            'avatar_url': '',
            'bio': '–ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ GameZY üéÆ',
            'followers_count': 0,
            'following_count': 0,
            'friends_count': 0,
            'level': 1,
            'experience': 0,
            'coins': 1000,
            'games_played': 0,
            'games_won': 0,
            'achievements': ['–ù–æ–≤–∏—á–æ–∫']
        }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users_storage[user_id] = user_data
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
        token = generate_token(user_id, username)
        
        logger.info(f"‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} ({email})")
        
        return jsonify({
            "status": "success",
            "message": "üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GameZY!",
            "token": token,
            "user_id": user_id,
            "username": username,
            "email": email,
            "level": 1,
            "coins": 1000,
            "token_expires_in": f"{app.config['TOKEN_EXPIRY_MINUTES']} –º–∏–Ω—É—Ç"
        }), 201
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
        return jsonify({
            "status": "error", 
            "message": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
        }), 500

@app.route("/login", methods=["POST"])
def login():
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({
                "status": "error", 
                "message": "No JSON data provided"
            }), 400
            
        email = data.get("email", "").strip().lower()
        password = data.get("password", "").strip()
        
        if not all([email, password]):
            return jsonify({
                "status": "error", 
                "message": "Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"
            }), 400
        
        # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_found = None
        for user_id, user_data in users_storage.items():
            if user_data['email'] == email:
                user_found = user_data
                break
        
        if not user_found:
            return jsonify({
                "status": "error", 
                "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            }), 401
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
        hashed_password = hash_password(password)
        if user_found['password_hash'] != hashed_password:
            return jsonify({
                "status": "error", 
                "message": "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å"
            }), 401
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—Ö–æ–¥–∞
        user_found['last_login'] = datetime.datetime.now()
        user_found['is_online'] = True
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
        token = generate_token(user_found['user_id'], user_found['username'])
        
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥: {user_found['username']}")
        
        return jsonify({
            "status": "success",
            "message": f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_found['username']}!",
            "token": token,
            "user_id": user_found['user_id'],
            "username": user_found['username'],
            "email": user_found['email'],
            "avatar_url": user_found['avatar_url'],
            "level": user_found['level'],
            "coins": user_found['coins'],
            "experience": user_found['experience'],
            "token_expires_in": f"{app.config['TOKEN_EXPIRY_MINUTES']} –º–∏–Ω—É—Ç"
        }), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {str(e)}")
        return jsonify({
            "status": "error", 
            "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É"
        }), 500

@app.route("/verify-token", methods=["POST"])
@token_required
def verify_token():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞"""
    user_data = users_storage.get(request.current_user)
    if not user_data:
        return jsonify({
            "status": "error",
            "message": "User not found"
        }), 404
        
    return jsonify({
        "status": "success",
        "message": "‚úÖ Token is valid",
        "user_id": request.user_data['user_id'],
        "username": request.user_data['username'],
        "expires_at": datetime.datetime.fromtimestamp(request.user_data['exp']).isoformat()
    }), 200

@app.route("/profile", methods=["GET"])
@token_required
def get_profile():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_data = users_storage.get(request.current_user)
        if not user_data:
            return jsonify({
                "status": "error",
                "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            }), 404
        
        profile = {
            "user_id": user_data['user_id'],
            "username": user_data['username'],
            "email": user_data['email'],
            "avatar_url": user_data['avatar_url'],
            "bio": user_data['bio'],
            "level": user_data['level'],
            "experience": user_data['experience'],
            "coins": user_data['coins'],
            "followers_count": user_data['followers_count'],
            "following_count": user_data['following_count'],
            "friends_count": user_data['friends_count'],
            "games_played": user_data['games_played'],
            "games_won": user_data['games_won'],
            "achievements": user_data['achievements'],
            "created_at": user_data['created_at'].isoformat(),
            "last_login": user_data['last_login'].isoformat(),
            "is_online": user_data['is_online']
        }
        
        return jsonify({
            "status": "success",
            "message": "–ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω",
            "profile": profile
        }), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}")
        return jsonify({
            "status": "error",
            "message": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"
        }), 500

@app.route("/games", methods=["GET"])
def get_games():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä"""
    games = [
        {
            "id": 1,
            "name": "‚öîÔ∏è Battle Royale",
            "description": "–°—Ä–∞–∂–∞–π—Å—è –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–∂–∏–≤—à–µ–≥–æ",
            "players_online": 150,
            "max_players": 100,
            "difficulty": "hard"
        },
        {
            "id": 2, 
            "name": "üéØ Archery Challenge",
            "description": "–ü–æ–ø–∞–¥–∏ –≤ —Ü–µ–ª—å –∏ —Å—Ç–∞–Ω—å –ª—É—á—à–∏–º —Å—Ç—Ä–µ–ª–∫–æ–º",
            "players_online": 75,
            "max_players": 50,
            "difficulty": "medium"
        },
        {
            "id": 3,
            "name": "üèéÔ∏è Racing Extreme", 
            "description": "–ì–æ–Ω–∫–∏ –Ω–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ",
            "players_online": 200,
            "max_players": 8,
            "difficulty": "easy"
        },
        {
            "id": 4,
            "name": "üß© Puzzle Master",
            "description": "–ò—Å–ø—ã—Ç–∞–π —Å–≤–æ–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
            "players_online": 45,
            "max_players": 2,
            "difficulty": "medium"
        }
    ]
    
    return jsonify({
        "status": "success",
        "games": games,
        "total_games": len(games)
    })

@app.route("/leaderboard", methods=["GET"])
def get_leaderboard():
    """–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤"""
    leaders = []
    for user_id, user_data in users_storage.items():
        leaders.append({
            "username": user_data['username'],
            "level": user_data['level'],
            "experience": user_data['experience'],
            "coins": user_data['coins'],
            "games_won": user_data['games_won']
        })
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—é –∏ –æ–ø—ã—Ç—É
    leaders.sort(key=lambda x: (-x['level'], -x['experience']))
    
    return jsonify({
        "status": "success",
        "leaderboard": leaders[:10],  # –¢–æ–ø-10
        "updated_at": datetime.datetime.now().isoformat()
    })

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
@app.errorhandler(404)
def not_found(error):
    return jsonify({
        "status": "error",
        "message": "üö´ Endpoint not found"
    }), 404

@app.errorhandler(500)
def internal_error(error):
    return jsonify({
        "status": "error",
        "message": "üí• Internal server error"
    }), 500

if __name__ == "__main__":
    port = int(os.environ.get('PORT', 5000))
    debug = os.environ.get('DEBUG', 'False').lower() == 'true'
    
    logger.info(f"üöÄ Starting GameZY Server on port {port}")
    logger.info(f"üîë Token expiry: {app.config['TOKEN_EXPIRY_MINUTES']} minutes")
    logger.info(f"üêõ Debug mode: {debug}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    test_user_id = str(uuid.uuid4())
    users_storage[test_user_id] = {
        'user_id': test_user_id,
        'username': 'demo_user',
        'email': 'demo@gamezy.com',
        'password_hash': hash_password('123456'),
        'email_verified': True,
        'created_at': datetime.datetime.now(),
        'last_login': datetime.datetime.now(),
        'is_online': True,
        'avatar_url': '',
        'bio': '–¢–µ—Å—Ç–æ–≤—ã–π –∏–≥—Ä–æ–∫',
        'followers_count': 10,
        'following_count': 5,
        'friends_count': 3,
        'level': 5,
        'experience': 1250,
        'coins': 2500,
        'games_played': 25,
        'games_won': 15,
        'achievements': ['–ù–æ–≤–∏—á–æ–∫', '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å', '–õ–µ–≥–µ–Ω–¥–∞']
    }
    
    logger.info("‚úÖ Demo user created: demo@gamezy.com / 123456")
    
    app.run(host="0.0.0.0", port=port, debug=debug)
